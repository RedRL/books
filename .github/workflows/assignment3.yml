name: Assignment3

on: [push]

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log Start Time
        run: echo "$(date -Iminutes)" > log.txt

      - name: Log Submitter Name
        run: echo "Harel Yerushalmi" >> log.txt

      - name: Build Docker Image
        run: |
          docker build -t books-service ./books-service
        id: build

      - name: Log Build Result
        run: |
          if [ ${{ steps.build.outcome }} == 'success' ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
            exit 1
          fi

      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt

  test:
    name: Test Job
    runs-on: ubuntu-latest
    needs: build
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Containers
        run: docker-compose up -d

      - name: Log Container Start Result
        run: |
          echo "Container up and running" >> log.txt

      - name: Run Tests
        run: |
          pytest tests/assn3_tests.py --junitxml=results.xml
        id: test

      - name: Log Test Result
        run: |
          if [ ${{ steps.test.outcome }} == 'success' ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
            exit 1
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results.xml

      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt

  query:
    name: Query Job
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Containers
        run: docker-compose up -d

      - name: Execute POST Requests for Specific Books
        run: |
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "Adventures of Huckleberry Finn", "ISBN": "9780520343641", "genre": "Fiction"}')
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "The Best of Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}')
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "Fear No Evil", "ISBN": "9780394558783", "genre": "Biography"}')
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"}')
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"}')
          curl -X POST "http://localhost:5001/books" -H "Content-Type: application/json" -d @<(echo '{"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}')

      - name: Run Queries from query.txt and Save Responses
        run: |
          while IFS= read -r query; do
            echo "query: $query" >> response.txt
            response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$query")
            body=$(echo "$response" | sed '$d')
            status_code=$(echo "$response" | tail -n1)
            if [ "$status_code" -eq 200 ]; then
              echo "response: $body" >> response.txt
            else
              echo "response: error $status_code" >> response.txt
            fi
            echo "" >> response.txt
          done < query.txt
        id: query

      - name: Upload Query Results
        uses: actions/upload-artifact@v4
        with:
          name: response.txt
          path: response.txt

      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt
