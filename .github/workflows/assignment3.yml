name: Assignment3

on: [push]

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    outputs:
      output_time: ${{ steps.time.outputs.time_value }}
      output_name: ${{ steps.name.outputs.name_value }}
      output_result: ${{ steps.result.outputs.result_value }}

    steps:
      - name: Output Start Time
        id: time
        run: echo "time_value=$(date -Iminutes)" >> $GITHUB_OUTPUT

      - name: Output Submitter Name
        id: name
        run: echo "name_value=Harel Yerushalmi" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker compose build
        id: build

      - name: Log Build Result
        id: result
        run: |
          if [ ${{ steps.build.outcome }} == 'success' ]; then
            echo "result_value=image successfully built" >> $GITHUB_OUTPUT
          else
            echo "$TIME" > log.txt
            echo "$NAME" >> log.txt
            echo "image not able to be built" >> log.txt

      - name: Upload Log File on Failure
        if: steps.result.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Exit on Failure
        if: steps.build.outcome != 'success'
        run: exit 1

  test:
    name: Test Job
    runs-on: ubuntu-latest
    needs: [build]
    env:
      TIME: ${{ needs.build.outputs.output_time }}
      NAME: ${{ needs.build.outputs.output_name }}
      RESULT: ${{ needs.build.outputs.output_result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Build Job Outputs
        run: |
          echo "$TIME" > log.txt
          echo "$NAME" >> log.txt
          echo "$RESULT" >> log.txt

      - name: Ensure port is available
        run: |
          existing_container=$(docker ps -q --filter "expose=27017")
          if [ -n "$existing_container" ]; then
            docker stop $existing_container
            docker rm $existing_container
          fi

      - name: Start Docker Containers
        run: |
          docker compose up -d
          if [ $? -eq 0 ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            sleep 5
          done
        shell: bash

      - name: Run Tests
        run: |
          docker compose exec -T books pytest -v /app/tests/assn3_tests.py > assn3_test_results.txt
        shell: bash
        continue-on-error: true
        id: test

      - name: Inspect Database Content
        run: |
          curl -s "http://localhost:5001/books" > db_content.txt
          cat db_content.txt

      - name: Log Test Result
        run: |
          if [ ${{ steps.test.outcome }} == 'success' ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi

      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: assn3_test_results
          path: assn3_test_results.txt

  query:
    name: Query Job
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Containers
        run: docker compose up -d

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            sleep 5
          done
        shell: bash

      - name: Execute Queries
        run: |
          touch response.txt  # Ensure the response.txt file exists
          if [ -f query.txt ]; then
            while IFS= read -r query; do
              encoded_query=$(echo "$query" | sed 's/ /%20/g')  # Encode spaces in the query string
              curl_output=$(curl -s -w "\n%{http_code}" -o response_body.txt "http://localhost:5001/books${encoded_query}")
              response_code=$(tail -n1 <<< "$curl_output")

              if [ "$response_code" -eq 200 ]; then
                # Check if the response is valid JSON
                if jq empty response_body.txt > /dev/null 2>&1; then
                  echo -e "query: ${query}\nresponse: $(<response_body.txt)" >> response.txt
                else
                  echo -e "query: ${query}\nresponse: error invalid JSON" >> response.txt
                fi
              else
                echo -e "query: ${query}\nresponse: error $response_code" >> response.txt
              fi
            done < query.txt
          else
            echo "query.txt file not found" >> response.txt  # Write a message to response.txt to ensure it exists
          fi

      - name: Upload Query Results
        uses: actions/upload-artifact@v4
        with:
          name: response.txt
          path: response.txt
