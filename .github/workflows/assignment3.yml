name: Assignment3

on: [push]

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log Start Time
        run: echo "$(date -Iminutes)" > log.txt

      - name: Log Submitter Name
        run: echo "Harel Yerushalmi" >> log.txt

      - name: Build Docker Image
        run: |
          docker compose build
        id: build

      - name: Log Build Result
        run: |
          if [ ${{ steps.build.outcome }} == 'success' ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
            exit 1
          fi

  test:
    name: Test Job
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure port is available
        run: |
          existing_container=$(docker ps -q --filter "expose=27017")
          if [ -n "$existing_container" ]; then
            docker stop $existing_container
            docker rm $existing_container
          fi

      - name: Start Docker Containers
        run: docker compose up -d

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            echo "Waiting for books service..." >> log.txt
            sleep 5
          done
        shell: bash

      - name: List files in container
        run: docker compose exec -T books ls -R /app >> log.txt
        shell: bash

      - name: Run Tests
        run: |
          docker compose exec -T books pytest -v /app/tests/assn3_tests.py > assn3_test_results.txt
          cat assn3_test_results.txt >> log.txt
        shell: bash
        continue-on-error: true
        id: test

      - name: Log Test Result
        run: |
          if [ ${{ steps.test.outcome }} == 'success' ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi

  query:
    name: Query Job
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure port is available
        run: |
          existing_container=$(docker ps -q --filter "expose=27017")
          if [ -n "$existing_container" ]; then
            docker stop $existing_container
            docker rm $existing_container
          fi

      - name: Start Docker Containers
        run: docker compose up -d

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            sleep 5
          done
        shell: bash

      - name: Execute Queries
        run: |
          touch response.txt  # Ensure the response.txt file exists
          if [ -f query.txt ]; then
            while IFS= read -r query; do
              curl_output=$(curl -s -w "\n%{http_code}" -o response_body.txt "http://localhost:5001/books${query}" 2>>log.txt)
              response=$(tail -n1 <<< "$curl_output")
              
              if [ "$response" -eq 200 ]; then
                cat response_body.txt >> response.txt
              else
                echo -e "query: ${query}\nresponse: error $response" >> response.txt
              fi
            done < query.txt
          else
            echo "query.txt file not found" >> response.txt  # Write a message to response.txt to ensure it exists
          fi

  finalize:
    name: Finalize and Upload Log
    runs-on: ubuntu-latest
    needs: query

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload Final Log File and Query Results
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
      - name: Upload Query Results
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt
