name: Assignment3

on: [push]

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    outputs:
      output_time: ${{ steps.time.outputs.time_value }}
      output_name: ${{ steps.name.outputs.name_value }}
      output_result: ${{ steps.result.outputs.result_value }}

    steps:
      - name: Output Start Time
        id: time
        run: echo "time_value=$(date -Iminutes)" >> $GITHUB_OUTPUT

      - name: Output Submitter Name
        id: name
        run: echo "name_value=Harel Yerushalmi" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          docker compose build

      - name: Log Build Result
        id: result
        if: ${{ steps.build.outcome == 'success' }}
        run: |
          echo "result_value=image successfully built" >> $GITHUB_OUTPUT

      - name: Log and Upload on Failure
        if: failure() || steps.build.outcome != 'success'
        run: |
          echo "${{ steps.time.outputs.time_value }}" > log.txt
          echo "${{ steps.name.outputs.name_value }}" >> log.txt
          echo "image not able to be built" >> log.txt

      - name: Upload Log File on Failure
        if: failure() || steps.build.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Exit on Failure
        if: failure() || steps.build.outcome != 'success'
        run: exit 1

  test:
    name: Test Job
    runs-on: ubuntu-latest
    needs: [build]
    env:
      TIME: ${{ needs.build.outputs.output_time }}
      NAME: ${{ needs.build.outputs.output_name }}
      RESULT: ${{ needs.build.outputs.output_result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Build Job Outputs
        run: |
          echo "$TIME" > log.txt
          echo "$NAME" >> log.txt
          echo "$RESULT" >> log.txt

      - name: Ensure port is available
        run: |
          existing_container=$(docker ps -q --filter "expose=27017")
          if [ -n "$existing_container" ]; then
            docker stop $existing_container
            docker rm $existing_container
          fi

      - name: Start Docker Containers
        id: start_containers
        run: |
          docker compose up -d
          if [ $? -eq 0 ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi      

      - name: Upload Log File on Failure
        if: ${{ steps.start_containers.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Exit on Container Failure
        if: ${{ steps.start_containers.outcome == 'failure' }}
        run: exit 1

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            sleep 5
          done
        shell: bash

      - name: Run Tests
        id: test
        run: |
          docker compose exec -T books pytest -v /app/tests/assn3_tests.py > assn3_test_results.txt
        shell: bash
        continue-on-error: true

      - name: Log Test Result
        run: |
          if [ ${{ steps.test.outcome }} == 'success' ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi

      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: assn3_test_results
          path: assn3_test_results.txt

      - name: Exit on Tests Failure
        if: ${{ steps.test.outcome == 'failure' }}
        run: exit 1

      - name: Inspect Database Content via GET Request
        run: |
          attempt=0
          max_attempts=5
          until [ $attempt -ge $max_attempts ]
          do
            curl -s "http://localhost:5001/books" > db_content.txt && break
            attempt=$((attempt+1))
            echo "Retry $attempt/$max_attempts: Waiting for books service..."
            sleep 5
          done
          if [ $attempt -eq $max_attempts ]; then
            echo "Books service did not respond in time"
            exit 1
          fi
          cat db_content.txt
          
          curl -s "http://localhost:5001/books?title=Adventures%20of%20Huckleberry%20Finn" > test.txt
          cat test.txt
        shell: bash

  query:
    name: Query Job
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Containers
        run: docker compose up -d

      - name: Wait for books service to be ready
        run: |
          until curl -s -f -o /dev/null http://localhost:5001/books; do
            sleep 5
          done
        shell: bash

      - name: Add Books to Database
        run: |
          declare -a books=(
            '{"title": "Adventures of Huckleberry Finn", "authors": "Mark Twain", "publishedDate": "2021-09-21", "ISBN": "9780520343641", "genre": "Fiction", "publisher": "Univ of California Press"}'
            '{"title": "Fear No Evil", "authors": "Anatoly Shcharansky", "publishedDate": "1988", "ISBN": "9780394558783", "genre": "Biography", "publisher": "Random House (NY)"}'
            '{"title": "The Adventures of Tom Sawyer", "authors": "Mark Twain", "publishedDate": "1977", "ISBN": "9780195810400", "genre": "Fiction", "publisher": "Oxford University Press, USA"}'
            '{"title": "I, Robot", "authors": "Isaac Asimov", "publishedDate": "1991-11-01", "ISBN": "9780553294385", "genre": "Science Fiction", "publisher": "National Geographic Books"}'
            '{"title": "Second Foundation", "authors": "Isaac Asimov", "publishedDate": "1991-10-01", "ISBN": "9780553293364", "genre": "Science Fiction", "publisher": "Spectra"}'
            '{"title": "The Best of Isaac Asimov", "authors": "Isaac Asimov", "publishedDate": "1973", "ISBN": "9780380006454", "genre": "Science Fiction", "publisher": "Avon Books"}'
          )
          for book in "${books[@]}"; do
            curl -X POST -H "Content-Type: application/json" -d "$book" http://localhost:5001/books
          done
        shell: bash

      - name: Display All Books in Database
        run: |
          echo "Fetching all books from the database..."
          curl -s "http://localhost:5001/books" > all_books.txt
          echo "All Books in the Database:"
          cat all_books.txt
        shell: bash

      - name: Execute Queries
        run: |
          touch response.txt  # Ensure the response.txt file exists
          if [ -f query.txt ]; then
            while IFS= read -r query; do
              curl_output=$(curl -s -w "\n%{http_code}" -o response_body.txt "http://localhost:5001/books${query}")
              response_code=$(tail -n1 <<< "$curl_output")

              if [ "$response_code" -eq 200 ]; then
                # Check if the response is valid JSON
                if jq empty response_body.txt > /dev/null 2>&1; then
                  echo -e "query: ${query}\nresponse: $(<response_body.txt)" >> response.txt
                else
                  echo -e "query: ${query}\nresponse: error invalid JSON" >> response.txt
                fi
              else
                echo -e "query: ${query}\nresponse: error $response_code" >> response.txt
              fi
            done < query.txt
          else
            echo "query.txt file not found" >> response.txt  # Write a message to response.txt to ensure it exists
          fi
      

      - name: Upload Query Results
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt
