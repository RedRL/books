name: assignment3

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the Docker image
      run: docker build -t books-service ./books-service

    - name: Log build success
      run: echo "Image successfully built" >> log.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
      books:
        image: books-service
        build:
          context: ./books-service
        ports:
          - 5001:5001
        depends_on:
          - mongo
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for services to be ready
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:5001/books || exit 1
      shell: bash

    - name: Run tests
      run: docker-compose exec -T books-service pytest -v tests/assn3_tests.py > assn3_test_results.txt
      shell: bash

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: assn3_test_results
        path: assn3_test_results.txt

  query:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for services to be ready
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:5001/books || exit 1
      shell: bash

    - name: Execute queries
      run: |
        echo "Starting query execution" >> log.txt
        if [ -f query.txt ]; then
          while IFS= read -r query; do
            echo "Executing query: ${query}" >> log.txt
            curl_output=$(curl -s -w "\n%{http_code}" -o response_body.txt "http://localhost:5001/books${query}")
            response=$(tail -n1 <<< "$curl_output")
            if [ "$response" -eq 200 ]; then
              cat response_body.txt >> response.txt
              echo -e "\nquery: ${query}\nresponse: $(<response_body.txt)" >> log.txt
            else
              echo -e "query: ${query}\nresponse: error $response" >> response.txt
              echo -e "query: ${query}\nresponse: error $response" >> log.txt
            fi
            cat response_body.txt >> log.txt  # Log the response body content
          done < query.txt
        fi
        ls -l >> log.txt  # List files after queries
      shell: bash

    - name: Upload response
      uses: actions/upload-artifact@v4
      with:
        name: response
        path: response.txt

    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: log
        path: log.txt
